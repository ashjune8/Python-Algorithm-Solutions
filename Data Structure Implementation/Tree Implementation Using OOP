class BinaryTree(object):
    
    def __init__(self,object):
        self.key = object
        self.leftchild = None
        self.rightchild = None
        
    def insertleftchild(self,newnode):
        if self.leftchild == None:
            self.leftchild = BinaryTree(newnode)
            
        else:
            t = BinaryTree(newnode)
            t.leftchild = self.leftchild
            self.leftchild = t
            
    def insertrightchild(self,newnode):
        if self.rightchild == None:
            self.rightchild = BinaryTree(newnode)
            
        else:
            t = BinaryTree(newnode)
            t.rightchild = self.rightchild
            self.rightchild = t
    def getleftchild(self):
        return self.leftchild
    def getrightchild(self):
        return self.rightchild
    def setrootvalue(self,newvalue):
        self.key = newvalue
        
    def getrootvalue(self):
        return self.key
        
        
def preorder(tree):
    
    if tree == None:
        return None
    else: 
        print tree.getrootvalue()
        preorder(tree.getleftchild())
        preorder(tree.getrightchild())
        
        
def postorder(tree):
    
    if tree == None:
        return None
    else: 
        
        postorder(tree.getleftchild())
        postorder(tree.getrightchild())
        print tree.getrootvalue()
        
def inorder(tree):
    
    if tree == None:
        return None
    else: 
        
        inorder(tree.getleftchild())
        print tree.getrootvalue()
        inorder(tree.getrightchild())
