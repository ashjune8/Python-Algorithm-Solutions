class Hash_Table(object):
    
    def __init__(self,size):
        self.size = size
        self.slots = [None] * self.size
        self.data = [None] * self.size
        
    def put(self,key,data):
        
        hashvalue = self.hashfunction(key,len(self.slots))
        
        if self.slots[hashvalue] == None:
            self.slots[hashvalue] = key
            self.data[hashvalue] = data
            
        else:
            
            if self.slots[hashvalue] == key:
                self.data[hashvalue] = data
                
            else:
                nexthashvalue = self.nexthashfunction(hashvalue,len(self.slots))
                
                while self.slots[nexthashvalue] != None and self.slots[hashvalue] != key:
                    nexthashvalue = self.nexthashfunction(nexthashvalue,len(self.slots))
                    
                    if self.slots[nexthashvalue] == None:
                        self.slots[nexthashvalue] = key
                        self.data[nexthashvalue] = data
                        
                    else:
                        self.data[nexthashvalue] = data
                        
    def hashfunction(self,key,len):
        return key%len
    
    def nexthashfunction(self,oldhash,len):
        return (oldhash+1)%len
    
    def get(self,key):
        
        data = None
        found = False
        stop = False
        position = startslot
        startslot = self.hashfunction(key,len(self.slots))
        
        while self.slots[position] != None and not found and not stop:
            
            if self.slots[position] == key:
                found = True
                data = self.data[position]
                
            else:
                position=self.rehash(position,len(self.slots))
                if position == startslot:
                    
                    stop = True
        return data
    
    def __getitem__(self,key):
        return self.get(key)

    def __setitem__(self,key,data):
        self.put(key,data)       
        
